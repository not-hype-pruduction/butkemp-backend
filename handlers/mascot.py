from io import BytesIO
import logging
import random
import re
from aiogram import Router, F, types
from aiogram.types import Message, CallbackQuery, BufferedInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder
import cairosvg

from keyboards import get_main_keyboard
from utils.storage import user_mascots
from config import MASCOT_SVG_TEMPLATE_PATH

# –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ —Å–∫—Ä–∏–ø—Ç–∞ generate_blin.py
from utils.generate_blin import (
    select_by_rarity, modify_svg_colors, replace_hat, load_svg,
    RARITY_WEIGHTS, COLOR_PALETTES, HAT_VARIANTS, HAT_COLORS
)

router = Router()


@router.callback_query(F.data == "get_mascot")
async def generate_mascot(callback: CallbackQuery):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –º–∞—Å–∫–æ—Ç–∞-–±–ª–∏–Ω–∞"""
    await callback.message.answer("üéÆ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –±–ª–∏–Ω–∞... –ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –∫–∞–∫–∞—è —Ä–µ–¥–∫–æ—Å—Ç—å –≤—ã–ø–∞–¥–µ—Ç?")

    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑–æ–≤—ã–π SVG
        svg_content = load_svg(MASCOT_SVG_TEMPLATE_PATH)

        # –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Ü–≤–µ—Ç–∞
        modified_svg, color_info = modify_svg_colors(svg_content)

        # –í—ã–±–∏—Ä–∞–µ–º —Ä–µ–¥–∫–æ—Å—Ç—å —à–∞–ø–∫–∏
        hat_rarity = select_by_rarity()

        # –ó–∞–º–µ–Ω—è–µ–º —à–∞–ø–∫—É —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–º–∏ —Ü–≤–µ—Ç–∞–º–∏
        modified_svg, hat_info = replace_hat(modified_svg, hat_rarity)

        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ñ–æ –æ –º–∞—Å–∫–æ—Ç–µ
        mascot_info = {
            "hat": hat_info,
            "body": color_info["body"],
            "stroke": color_info["stroke"]
        }

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞—Å–∫–æ—Ç–∞ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = callback.from_user.id
        if user_id not in user_mascots:
            user_mascots[user_id] = []
        user_mascots[user_id].append(mascot_info)

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º SVG –≤ PNG
        png_buffer = BytesIO()
        cairosvg.svg2png(bytestring=modified_svg, write_to=png_buffer, scale=2.0)
        png_buffer.seek(0)

        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        input_file = BufferedInputFile(png_buffer.read(), filename="mascot.png")

        # –°–æ–∑–¥–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –º–∞—Å–∫–æ—Ç–∞
        rarity_emoji = {
            "–æ–±—ã—á–Ω—ã–π": "‚ö™",
            "–Ω–µ–æ–±—ã—á–Ω—ã–π": "üü¢",
            "—Ä–µ–¥–∫–∏–π": "üîµ",
            "—ç–ø–∏—á–µ—Å–∫–∏–π": "üü£",
            "–ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π": "üü°"
        }

        description = (
            f"<b>üéÆ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–±–∏–ª–∏ –±–ª–∏–Ω–∞!</b>\n\n"
            f"<b>üëí –®–∞–ø–∫–∞:</b> {hat_info['name']} {rarity_emoji[hat_info['rarity']]} {hat_info['rarity'].capitalize()}\n"
            f"<b>ü•û –¢–µ–ª–æ:</b> {rarity_emoji[color_info['body']['rarity']]} {color_info['body']['rarity'].capitalize()}\n"
            f"<b>‚úèÔ∏è –û–±–≤–æ–¥–∫–∞:</b> {rarity_emoji[color_info['stroke']['rarity']]} {color_info['stroke']['rarity'].capitalize()}\n"
        )

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
        builder = InlineKeyboardBuilder()
        builder.add(types.InlineKeyboardButton(text="üé≤ –í—ã–±–∏—Ç—å –µ—â—ë –±–ª–∏–Ω–∞", callback_data="get_mascot"))
        builder.add(types.InlineKeyboardButton(text="üìö –ú–æ—è –∫–æ–ª–ª–µ–∫—Ü–∏—è", callback_data="my_collection"))
        builder.add(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu"))
        builder.adjust(1)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PNG –∫–∞–∫ —Ñ–æ—Ç–æ
        await callback.message.answer_photo(
            photo=input_file,
            caption=description,
            parse_mode="HTML",
            reply_markup=builder.as_markup()
        )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–∞—Å–∫–æ—Ç–∞: {e}")
        await callback.message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–∞—Å–∫–æ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    await callback.answer()

@router.callback_query(F.data == "my_collection")
async def show_collection(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–ª–ª–µ–∫—Ü–∏—é –º–∞—Å–∫–æ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = callback.from_user.id

    if user_id not in user_mascots or not user_mascots[user_id]:
        await callback.message.answer(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –±–ª–∏–Ω–∞ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏. –î–∞–≤–∞–π—Ç–µ –≤—ã–±—å–µ–º –ø–µ—Ä–≤–æ–≥–æ!",
            reply_markup=InlineKeyboardBuilder().add(
                types.InlineKeyboardButton(text="üé≤ –í—ã–±–∏—Ç—å –±–ª–∏–Ω–∞", callback_data="get_mascot")
            ).as_markup()
        )
        await callback.answer()
        return

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    collection = user_mascots[user_id]
    stats = {rarity: 0 for rarity in RARITY_WEIGHTS.keys()}

    for mascot in collection:
        stats[mascot["hat"]["rarity"]] += 1
        stats[mascot["body"]["rarity"]] += 1
        stats[mascot["stroke"]["rarity"]] += 1

    # –°–æ–∑–¥–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    collection_text = (
        f"<b>üìö –í–∞—à–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è –±–ª–∏–Ω–æ–≤</b>\n\n"
        f"–í—Å–µ–≥–æ –±–ª–∏–Ω–æ–≤: <b>{len(collection)}</b>\n\n"
        f"<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–¥–∫–æ—Å—Ç–∏:</b>\n"
        f"‚ö™ –û–±—ã—á–Ω—ã—Ö: {stats['–æ–±—ã—á–Ω—ã–π']}\n"
        f"üü¢ –ù–µ–æ–±—ã—á–Ω—ã—Ö: {stats['–Ω–µ–æ–±—ã—á–Ω—ã–π']}\n"
        f"üîµ –†–µ–¥–∫–∏—Ö: {stats['—Ä–µ–¥–∫–∏–π']}\n"
        f"üü£ –≠–ø–∏—á–µ—Å–∫–∏—Ö: {stats['—ç–ø–∏—á–µ—Å–∫–∏–π']}\n"
        f"üü° –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã—Ö: {stats['–ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π']}\n"
    )

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="üé≤ –í—ã–±–∏—Ç—å –µ—â—ë –±–ª–∏–Ω–∞", callback_data="get_mascot"))
    builder.add(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu"))
    builder.adjust(1)

    await callback.message.answer(collection_text, reply_markup=builder.as_markup(), parse_mode="HTML")
    await callback.answer()

@router.callback_query(F.data == "back_to_menu")
async def back_to_menu(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback.message.answer(
        "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_keyboard()
    )
    await callback.answer()

def register_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    dp.include_router(router)