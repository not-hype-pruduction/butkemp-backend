from io import BytesIO
import logging
import random
import re
from typing import Dict, Any, Optional

from aiogram import Router, F, types
from aiogram.types import Message, CallbackQuery, BufferedInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder
import cairosvg
from sqlalchemy.ext.asyncio import AsyncSession

from keyboards import get_main_keyboard
from config import MASCOT_SVG_TEMPLATE_PATH
from models.database import get_session_ctx
from models.repository import (
    add_mascot as save_mascot,
    get_user_mascots,
    get_user_rating,
    get_top_users,
    get_user_position
)

# –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ —Å–∫—Ä–∏–ø—Ç–∞ generate_blin.py
from utils.generate_blin import (
    select_by_rarity, modify_svg_colors, replace_hat, load_svg,
    RARITY_WEIGHTS, COLOR_PALETTES, HAT_VARIANTS, HAT_COLORS
)

router = Router()

# –≠–º–æ–¥–∑–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–µ–¥–∫–æ—Å—Ç–µ–π
RARITY_EMOJI = {
    "–æ–±—ã—á–Ω—ã–π": "‚ö™",
    "–Ω–µ–æ–±—ã—á–Ω—ã–π": "üü¢",
    "—Ä–µ–¥–∫–∏–π": "üîµ",
    "—ç–ø–∏—á–µ—Å–∫–∏–π": "üü£",
    "–ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π": "üü°"
}


@router.callback_query(F.data == "get_mascot")
async def generate_mascot(callback: CallbackQuery):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –º–∞—Å–∫–æ—Ç–∞-–±–ª–∏–Ω–∞"""
    await callback.message.answer("üéÆ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –±–ª–∏–Ω–∞... –ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –∫–∞–∫–∞—è —Ä–µ–¥–∫–æ—Å—Ç—å –≤—ã–ø–∞–¥–µ—Ç?")

    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑–æ–≤—ã–π SVG
        svg_content = load_svg(MASCOT_SVG_TEMPLATE_PATH)

        # –ò–∑–º–µ–Ω—è–µ–º —Ñ–æ–Ω –Ω–∞ –æ—Ä–∞–Ω–∂–µ–≤—ã–π FDBA74
        svg_content = re.sub(
            r'<rect width="227" height="227" fill="white"/>',
            r'<rect width="227" height="227" fill="#FDBA74"/>',
            svg_content
        )

        # –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Ü–≤–µ—Ç–∞
        modified_svg, color_info = modify_svg_colors(svg_content)

        # –í—ã–±–∏—Ä–∞–µ–º —Ä–µ–¥–∫–æ—Å—Ç—å —à–∞–ø–∫–∏
        hat_rarity = select_by_rarity()

        # –ó–∞–º–µ–Ω—è–µ–º —à–∞–ø–∫—É —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–º–∏ —Ü–≤–µ—Ç–∞–º–∏
        modified_svg, hat_info = replace_hat(modified_svg, hat_rarity)

        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ñ–æ –æ –º–∞—Å–∫–æ—Ç–µ
        mascot_info = {
            "hat": hat_info,
            "body": color_info["body"],
            "stroke": color_info["stroke"]
        }

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞—Å–∫–æ—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        user_id = callback.from_user.id
        async with await get_session_ctx() as session:
            mascot = await save_mascot(session, user_id, mascot_info)

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º SVG –≤ PNG
        png_buffer = BytesIO()
        cairosvg.svg2png(bytestring=modified_svg, write_to=png_buffer, scale=2.0)
        png_buffer.seek(0)

        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        input_file = BufferedInputFile(png_buffer.read(), filename="mascot.png")

        # –°–æ–∑–¥–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –º–∞—Å–∫–æ—Ç–∞
        description = (
            f"<b>üéÆ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–±–∏–ª–∏ –±–ª–∏–Ω–∞!</b>\n\n"
            f"<b>üëí –®–∞–ø–∫–∞:</b> {hat_info['name']} {RARITY_EMOJI[hat_info['rarity']]} {hat_info['rarity'].capitalize()}\n"
            f"<b>ü•û –¢–µ–ª–æ:</b> {RARITY_EMOJI[color_info['body']['rarity']]} {color_info['body']['rarity'].capitalize()}\n"
            f"<b>‚úèÔ∏è –û–±–≤–æ–¥–∫–∞:</b> {RARITY_EMOJI[color_info['stroke']['rarity']]} {color_info['stroke']['rarity'].capitalize()}\n"
        )

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
        builder = InlineKeyboardBuilder()
        builder.add(types.InlineKeyboardButton(text="üé≤ –í—ã–±–∏—Ç—å –µ—â—ë –±–ª–∏–Ω–∞", callback_data="get_mascot"))
        builder.add(types.InlineKeyboardButton(text="üìö –ú–æ—è –∫–æ–ª–ª–µ–∫—Ü–∏—è", callback_data="my_collection"))
        builder.add(types.InlineKeyboardButton(text="üèÜ –ú–æ–π —Ä–µ–π—Ç–∏–Ω–≥", callback_data="my_rating"))
        builder.add(types.InlineKeyboardButton(text="üèÖ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤", callback_data="top_players"))
        builder.add(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu"))
        builder.adjust(1)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PNG –∫–∞–∫ —Ñ–æ—Ç–æ
        await callback.message.answer_photo(
            photo=input_file,
            caption=description,
            parse_mode="HTML",
            reply_markup=builder.as_markup()
        )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–∞—Å–∫–æ—Ç–∞: {e}")
        await callback.message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–∞—Å–∫–æ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    await callback.answer()


@router.callback_query(F.data == "my_collection")
async def show_collection(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–ª–ª–µ–∫—Ü–∏—é –º–∞—Å–∫–æ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = callback.from_user.id

    async with await get_session_ctx() as session:
        # –ü–æ–ª—É—á–∞–µ–º –º–∞—Å–∫–æ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
        mascots = await get_user_mascots(session, user_id)

        if not mascots:
            await callback.message.answer(
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –±–ª–∏–Ω–∞ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏. –î–∞–≤–∞–π—Ç–µ –≤—ã–±—å–µ–º –ø–µ—Ä–≤–æ–≥–æ!",
                reply_markup=InlineKeyboardBuilder().add(
                    types.InlineKeyboardButton(text="üé≤ –í—ã–±–∏—Ç—å –±–ª–∏–Ω–∞", callback_data="get_mascot")
                ).as_markup()
            )
            await callback.answer()
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_rating = await get_user_rating(session, user_id)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
        collection_text = (
            f"<b>üìö –í–∞—à–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è –±–ª–∏–Ω–æ–≤</b>\n\n"
            f"–í—Å–µ–≥–æ –±–ª–∏–Ω–æ–≤: <b>{len(mascots)}</b>\n\n"
            f"<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–¥–∫–æ—Å—Ç–∏:</b>\n"
            f"‚ö™ –û–±—ã—á–Ω—ã—Ö: {user_rating['common_count']}\n"
            f"üü¢ –ù–µ–æ–±—ã—á–Ω—ã—Ö: {user_rating['uncommon_count']}\n"
            f"üîµ –†–µ–¥–∫–∏—Ö: {user_rating['rare_count']}\n"
            f"üü£ –≠–ø–∏—á–µ—Å–∫–∏—Ö: {user_rating['epic_count']}\n"
            f"üü° –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã—Ö: {user_rating['legendary_count']}\n\n"
            f"<b>–¢–µ–∫—É—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥:</b> {user_rating['rating_score']} –æ—á–∫–æ–≤\n"
            f"<b>–ü–æ–∑–∏—Ü–∏—è –≤ –æ–±—â–µ–º —Ä–µ–π—Ç–∏–Ω–≥–µ:</b> {user_rating['rating_position']}"
        )

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
        builder = InlineKeyboardBuilder()
        builder.add(types.InlineKeyboardButton(text="üé≤ –í—ã–±–∏—Ç—å –µ—â—ë –±–ª–∏–Ω–∞", callback_data="get_mascot"))
        builder.add(types.InlineKeyboardButton(text="üèÜ –ú–æ–π —Ä–µ–π—Ç–∏–Ω–≥", callback_data="my_rating"))
        builder.add(types.InlineKeyboardButton(text="üèÖ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤", callback_data="top_players"))
        builder.add(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu"))
        builder.adjust(1)

        await callback.message.answer(collection_text, reply_markup=builder.as_markup(), parse_mode="HTML")
        await callback.answer()


@router.callback_query(F.data == "my_rating")
async def show_my_rating(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = callback.from_user.id

    async with await get_session_ctx() as session:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_rating = await get_user_rating(session, user_id)

        if not user_rating:
            await callback.message.answer(
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞. –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥, –Ω—É–∂–Ω–æ –≤—ã–±–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –±–ª–∏–Ω–∞!",
                reply_markup=InlineKeyboardBuilder().add(
                    types.InlineKeyboardButton(text="üé≤ –í—ã–±–∏—Ç—å –±–ª–∏–Ω–∞", callback_data="get_mascot")
                ).as_markup()
            )
            await callback.answer()
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–π—Ç–∏–Ω–≥–µ
        username = user_rating["username"] or f"@{user_rating['user_id']}"
        full_name = user_rating["full_name"] or username

        rating_text = (
            f"<b>üèÜ –†–µ–π—Ç–∏–Ω–≥: {full_name}</b>\n\n"
            f"–í—Å–µ–≥–æ –±–ª–∏–Ω–æ–≤: <b>{user_rating['total_mascots']}</b>\n\n"
            f"<b>–î–µ—Ç–∞–ª–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏:</b>\n"
            f"‚ö™ –û–±—ã—á–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {user_rating['common_count']}\n"
            f"üü¢ –ù–µ–æ–±—ã—á–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {user_rating['uncommon_count']}\n"
            f"üîµ –†–µ–¥–∫–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {user_rating['rare_count']}\n"
            f"üü£ –≠–ø–∏—á–µ—Å–∫–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {user_rating['epic_count']}\n"
            f"üü° –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {user_rating['legendary_count']}\n\n"
            f"<b>–í–∞—à —Ä–µ–π—Ç–∏–Ω–≥:</b> {user_rating['rating_score']} –æ—á–∫–æ–≤\n"
            f"<b>–ú–µ—Å—Ç–æ –≤ —Ç–æ–ø–µ:</b> {user_rating['rating_position']}"
        )

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
        builder = InlineKeyboardBuilder()
        builder.add(types.InlineKeyboardButton(text="üé≤ –í—ã–±–∏—Ç—å –µ—â—ë –±–ª–∏–Ω–∞", callback_data="get_mascot"))
        builder.add(types.InlineKeyboardButton(text="üìö –ú–æ—è –∫–æ–ª–ª–µ–∫—Ü–∏—è", callback_data="my_collection"))
        builder.add(types.InlineKeyboardButton(text="üèÖ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤", callback_data="top_players"))
        builder.add(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu"))
        builder.adjust(1)

        await callback.message.answer(rating_text, reply_markup=builder.as_markup(), parse_mode="HTML")
        await callback.answer()


@router.callback_query(F.data == "top_players")
async def show_top_players(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤"""
    async with await get_session_ctx() as session:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        top_users = await get_top_users(session, limit=10)

        if not top_users:
            await callback.message.answer(
                "–†–µ–π—Ç–∏–Ω–≥ –ø–æ–∫–∞ –ø—É—Å—Ç! –ë—É–¥—å –ø–µ—Ä–≤—ã–º, –∫—Ç–æ –≤—ã–±—å–µ—Ç –±–ª–∏–Ω–∞!",
                reply_markup=InlineKeyboardBuilder().add(
                    types.InlineKeyboardButton(text="üé≤ –í—ã–±–∏—Ç—å –±–ª–∏–Ω–∞", callback_data="get_mascot")
                ).as_markup()
            )
            await callback.answer()
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–æ–ø–æ–º
        top_text = "<b>üèÖ –¢–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤:</b>\n\n"

        medals = ["ü•á", "ü•à", "ü•â"]
        for i, user in enumerate(top_users):
            position = i + 1
            medal = medals[i] if i < 3 else f"{position}."
            username = user["username"] or f"ID: {user['user_id']}"
            full_name = user["full_name"] or username

            top_text += (
                f"{medal} <b>{full_name}</b>\n"
                f"   ‚îú –†–µ–π—Ç–∏–Ω–≥: {user['rating_score']} –æ—á–∫–æ–≤\n"
                f"   ‚îú –ë–ª–∏–Ω–æ–≤: {user['total_mascots']}\n"
                f"   ‚îî üü°: {user['legendary_count']} | üü£: {user['epic_count']} | "
                f"üîµ: {user['rare_count']} | üü¢: {user['uncommon_count']} | ‚ö™: {user['common_count']}\n\n"
            )

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
        builder = InlineKeyboardBuilder()
        builder.add(types.InlineKeyboardButton(text="üé≤ –í—ã–±–∏—Ç—å –µ—â—ë –±–ª–∏–Ω–∞", callback_data="get_mascot"))
        builder.add(types.InlineKeyboardButton(text="üìö –ú–æ—è –∫–æ–ª–ª–µ–∫—Ü–∏—è", callback_data="my_collection"))
        builder.add(types.InlineKeyboardButton(text="üèÜ –ú–æ–π —Ä–µ–π—Ç–∏–Ω–≥", callback_data="my_rating"))
        builder.add(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu"))
        builder.adjust(1)

        await callback.message.answer(top_text, reply_markup=builder.as_markup(), parse_mode="HTML")
        await callback.answer()


@router.callback_query(F.data == "back_to_menu")
async def back_to_menu(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback.message.answer(
        "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_keyboard()
    )
    await callback.answer()


def register_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    dp.include_router(router)