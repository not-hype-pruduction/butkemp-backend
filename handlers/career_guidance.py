from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder

from keyboards import get_main_keyboard
from utils.storage import professions, current_lecture, lectures
from data.professions import PROFESSIONS_LECTURES, PROFESSION_DESCRIPTIONS

router = Router()


@router.callback_query(F.data == "career_guidance")
async def career_guidance_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ø—Ä–æ—Ñ–æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏"""
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è–º–∏
    builder = InlineKeyboardBuilder()

    for profession in PROFESSIONS_LECTURES.keys():
        builder.add(F.text(profession, callback_data=f"profession_{profession}"))

    builder.add(F.text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu"))
    builder.adjust(1)  # –ü–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Å—Ç—Ä–æ–∫–µ

    await callback.message.answer(
        "üéì <b>–ü—Ä–æ—Ñ–æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –ø—Ä–æ—Ñ–µ—Å—Å–∏—é, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ –Ω–µ–π –±–æ–ª—å—à–µ –∏ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ª–µ–∫—Ü–∏—è–º:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()


@router.callback_query(lambda c: c.data.startswith("profession_"))
async def show_profession_info(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏"""
    user_id = callback.from_user.id
    profession = callback.data.replace("profession_", "")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø—Ä–æ—Ñ–µ—Å—Å–∏—é
    professions[user_id] = profession

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –ª–µ–∫—Ü–∏—è–º–∏
    builder = InlineKeyboardBuilder()

    for i, lecture in enumerate(PROFESSIONS_LECTURES[profession]):
        builder.add(F.text(f"üìö {lecture}", callback_data=f"lecture_{i}"))

    builder.add(F.text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è–º", callback_data="career_guidance"))
    builder.add(F.text("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu"))
    builder.adjust(1)  # –ü–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Å—Ç—Ä–æ–∫–µ

    await callback.message.answer(
        f"üéØ <b>–ü—Ä–æ—Ñ–µ—Å—Å–∏—è: {profession}</b>\n\n"
        f"{PROFESSION_DESCRIPTIONS[profession]}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –ª–µ–∫—Ü–∏—é, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()


@router.callback_query(lambda c: c.data.startswith("lecture_"))
async def show_lecture(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –ª–µ–∫—Ü–∏—é"""
    user_id = callback.from_user.id
    lecture_index = int(callback.data.replace("lecture_", ""))

    if user_id not in professions:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ø–∞–ª —Å—é–¥–∞ –Ω–µ–æ–±—ã—á–Ω—ã–º –ø—É—Ç–µ–º
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
        return

    profession = professions[user_id]
    lecture_name = PROFESSIONS_LECTURES[profession][lecture_index]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –ª–µ–∫—Ü–∏—é
    lectures[user_id] = lecture_name
    current_lecture[user_id] = lecture_index

    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ª–µ–∫—Ü–∏–∏
    # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç
    lecture_content = f"<b>{lecture_name}</b>\n\n"
    lecture_content += f"–≠—Ç–æ –ª–µ–∫—Ü–∏—è –æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ '{profession}'. –í —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, "
    lecture_content += f"–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã, —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ–ª–µ–∑–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–±—É—á–µ–Ω–∏—é.\n\n"

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    builder = InlineKeyboardBuilder()

    # –ö–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –º–µ–∂–¥—É –ª–µ–∫—Ü–∏—è–º–∏
    if lecture_index > 0:
        builder.add(F.text("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data=f"lecture_{lecture_index - 1}"))

    if lecture_index < len(PROFESSIONS_LECTURES[profession]) - 1:
        builder.add(F.text("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è", callback_data=f"lecture_{lecture_index + 1}"))

    builder.add(F.text("‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É –ª–µ–∫—Ü–∏–π", callback_data=f"profession_{profession}"))
    builder.add(F.text("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu"))
    builder.adjust(2, 1, 1)  # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏

    await callback.message.answer(lecture_content, reply_markup=builder.as_markup())
    await callback.answer()


def register_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    dp.include_router(router)