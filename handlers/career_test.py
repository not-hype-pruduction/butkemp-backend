from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder

from keyboards import get_main_keyboard
from utils.storage import test_state, test_answers
from data.test_questions import CAREER_TEST_QUESTIONS, TEST_INTERPRETATIONS

router = Router()


@router.callback_query(F.data == "career_test")
async def start_career_test(callback: CallbackQuery):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ñ–æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
    user_id = callback.from_user.id

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ—Å—Ç–∞
    test_state[user_id] = 0
    test_answers[user_id] = []

    await callback.message.answer(
        "üß© <b>–ü—Ä–æ—Ñ–æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç</b>\n\n"
        "–Ø –∑–∞–¥–∞–º –≤–∞–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤, —á—Ç–æ–±—ã –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å –≤–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã –∏ —Å–∫–ª–æ–Ω–Ω–æ—Å—Ç–∏.\n"
        "–û—Ç–≤–µ—á–∞–π—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ, —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Ç–æ—á–Ω–µ–µ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏.\n\n"
        f"<b>–í–æ–ø—Ä–æ—Å 1 –∏–∑ {len(CAREER_TEST_QUESTIONS)}:</b>\n{CAREER_TEST_QUESTIONS[0]}"
    )
    await callback.answer()


@router.message(lambda message: message.from_user.id in test_state and test_state[message.from_user.id] < len(
    CAREER_TEST_QUESTIONS))
async def process_test_answer(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Ç–µ—Å—Ç–∞"""
    user_id = message.from_user.id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    test_answers[user_id].append(message.text)
    test_state[user_id] += 1

    if test_state[user_id] < len(CAREER_TEST_QUESTIONS):
        # –ó–∞–¥–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
        current_question = test_state[user_id]
        await message.answer(
            f"<b>–í–æ–ø—Ä–æ—Å {current_question + 1} –∏–∑ {len(CAREER_TEST_QUESTIONS)}:</b>\n"
            f"{CAREER_TEST_QUESTIONS[current_question]}"
        )
    else:
        # –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç—ã
        await analyze_test_results(message, user_id)


async def analyze_test_results(message: Message, user_id: int):
    """–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞ –∏ –≤—ã–≤–æ–¥ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
    # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –ø—Ä–æ—Å—Ç–æ –æ–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –æ—Ç–≤–µ—Ç—ã –∏ –∏—â–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞

    all_answers = " ".join(test_answers[user_id]).lower()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ—Å—Ç—å –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º (–ø—Ä–∏–º–∏—Ç–∏–≤–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞)
    result_types = []

    if any(word in all_answers for word in ["–∫–æ–º–ø—å—é—Ç–µ—Ä", "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "—Ç–µ—Ö–Ω–∏–∫–∞", "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏"]):
        result_types.append("—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π")

    if any(word in all_answers for word in ["—Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ", "–∏—Å–∫—É—Å—Å—Ç–≤–æ", "—Ä–∏—Å–æ–≤–∞—Ç—å", "–º—É–∑—ã–∫–∞"]):
        result_types.append("—Ç–≤–æ—Ä—á–µ—Å–∫–∏–π")

    if any(word in all_answers for word in ["–ª—é–¥–∏", "–æ–±—â–µ–Ω–∏–µ", "–ø–æ–º–æ—â—å", "–ø—Å–∏—Ö–æ–ª–æ–≥–∏—è"]):
        result_types.append("—Å–æ—Ü–∏–∞–ª—å–Ω—ã–π")

    if any(word in all_answers for word in ["–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è", "–∞–Ω–∞–ª–∏–∑", "–Ω–∞—É–∫–∞", "–∏–∑—É—á–µ–Ω–∏–µ"]):
        result_types.append("–∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π")

    if any(word in all_answers for word in ["–±–∏–∑–Ω–µ—Å", "–¥–µ–Ω—å–≥–∏", "—Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ", "–ª–∏–¥–µ—Ä—Å—Ç–≤–æ"]):
        result_types.append("–ø—Ä–µ–¥–ø—Ä–∏–∏–º—á–∏–≤—ã–π")

    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ, –¥–∞–µ–º –æ–±—â—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
    if not result_types:
        result_types.append("—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π")

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    result_text = "üéØ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ—Ñ–æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞:</b>\n\n"

    for result_type in result_types:
        result_text += f"‚Ä¢ {TEST_INTERPRETATIONS[result_type]}\n\n"

    result_text += "–î–ª—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–º—É –∫–∞—Ä—å–µ—Ä–Ω–æ–º—É –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É."

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
    builder = InlineKeyboardBuilder()
    builder.add(F.text("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu"))

    await message.answer(result_text, reply_markup=builder.as_markup())

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ—Å—Ç–∞
    del test_state[user_id]
    del test_answers[user_id]


@router.callback_query(F.data == "back_to_menu")
async def back_to_menu(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback.message.answer(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_keyboard()
    )
    await callback.answer()


def register_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    dp.include_router(router)