import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command
from aiogram.enums.parse_mode import ParseMode
from aiogram.utils.keyboard import InlineKeyboardBuilder
from yandex_cloud_ml_sdk import YCloudML
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω—ã –¥–æ—Å—Ç—É–ø–∞
TELEGRAM_TOKEN = os.getenv("TG_TOKEN")
YANDEX_GPT_API_KEY = os.getenv("YANDEX_API_KEY")
YANDEX_GPT_FOLDER_ID = os.getenv("YANDEX_FOLDER_ID")

# –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Å—Ç–∞—Ç—É—Å —Ä–µ–∂–∏–º–∞ –ø—Å–∏—Ö–æ–ª–æ–≥–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_sessions = {}
psychologist_active = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ä–µ–∂–∏–º–∞ –ø—Å–∏—Ö–æ–ª–æ–≥–∞

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ø–Ω–¥–µ–∫—Å –ì–ü–¢
sdk = YCloudML(
    folder_id=YANDEX_GPT_FOLDER_ID,
    auth=YANDEX_GPT_API_KEY
)
model = sdk.models.completions('yandexgpt-lite')
model.configure(
    temperature=0.6,
    max_tokens=1500
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard(is_psychologist_active=False):
    builder = InlineKeyboardBuilder()

    if is_psychologist_active:
        builder.add(types.InlineKeyboardButton(
            text="üõë –í—ã–∫–ª—é—á–∏—Ç—å –ø—Å–∏—Ö–æ–ª–æ–≥–∞",
            callback_data="stop_psychologist"
        ))
    else:
        builder.add(types.InlineKeyboardButton(
            text="üß† –†–µ–∂–∏–º –ø—Å–∏—Ö–æ–ª–æ–≥–∞",
            callback_data="start_psychologist"
        ))

    return builder.as_markup()


@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start."""
    user_id = message.from_user.id
    user_sessions[user_id] = []
    psychologist_active[user_id] = False

    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.\n"
        "–û–¥–Ω–∞ –∏–∑ –º–æ–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π - —Ä–µ–∂–∏–º –ø—Å–∏—Ö–æ–ª–æ–≥–∞. –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ.",
        reply_markup=get_main_keyboard(False)
    )


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard(is_psychologist_active=False):
    builder = InlineKeyboardBuilder()

    if is_psychologist_active:
        builder.add(types.InlineKeyboardButton(
            text="üõë –í—ã–∫–ª—é—á–∏—Ç—å –ø—Å–∏—Ö–æ–ª–æ–≥–∞",
            callback_data="stop_psychologist"
        ))
    else:
        builder.add(types.InlineKeyboardButton(
            text="üß† –†–µ–∂–∏–º –ø—Å–∏—Ö–æ–ª–æ–≥–∞",
            callback_data="start_psychologist"
        ))

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞ –±–ª–∏–Ω–æ–≤
    builder.add(types.InlineKeyboardButton(
        text="ü•û –ü–æ–ª—É—á–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç –±–ª–∏–Ω–æ–≤",
        callback_data="pancake_recipe"
    ))

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Ä–µ–∂–∏–º–∞ –ø—Ä–æ—Ñ–æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏
    builder.add(types.InlineKeyboardButton(
        text="üéì –ü—Ä–æ—Ñ–æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è",
        callback_data="career_guidance"
    ))

    builder.add(types.InlineKeyboardButton(
        text="üß© –ü—Ä–æ—Ñ–æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç",
        callback_data="career_test"
    ))

    # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 1 –≤ —Ä—è–¥—É
    builder.adjust(1)

    return builder.as_markup()


# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ç–µ—Å—Ç–µ
test_state = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
test_answers = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

# –í–æ–ø—Ä–æ—Å—ã —Ç–µ—Å—Ç–∞
CAREER_TEST_QUESTIONS = [
    "–ö–∞–∫–∏–µ –∑–∞–Ω—è—Ç–∏—è –≤–∞–º –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –Ω—Ä–∞–≤—è—Ç—Å—è –≤ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è?",
    "–ö–∞–∫–∏–µ —à–∫–æ–ª—å–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –≤–∞–º –Ω—Ä–∞–≤—è—Ç—Å—è –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ?",
    "–ö–∞–∫–∏–º–∏ –Ω–∞–≤—ã–∫–∞–º–∏ –≤—ã –≥–æ—Ä–¥–∏—Ç–µ—Å—å –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ?",
    "–ö–∞–∫ –≤—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å: –≤ –∫–æ–º–∞–Ω–¥–µ –∏–ª–∏ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ?",
    "–ß—Ç–æ –¥–ª—è –≤–∞—Å –≤–∞–∂–Ω–µ–µ –≤ –±—É–¥—É—â–µ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏: –≤—ã—Å–æ–∫–∏–π –¥–æ—Ö–æ–¥, —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å, —Ç–≤–æ—Ä—á–µ—Å–∫–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∏–ª–∏ –ø–æ–º–æ—â—å –ª—é–¥—è–º?"
]


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ñ–æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
@dp.callback_query(lambda c: c.data == "career_test")
async def start_career_test(callback: types.CallbackQuery):
    """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ñ–æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
    user_id = callback.from_user.id

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ—Å—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    test_state[user_id] = 0
    test_answers[user_id] = []

    await callback.message.answer(
        "üß© *–ü—Ä–æ—Ñ–æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç*\n\n"
        "–≠—Ç–æ—Ç —Ç–µ—Å—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å—Å—è —Å –≤—ã–±–æ—Ä–æ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏. "
        "–Ø –∑–∞–¥–∞–º –≤–∞–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ –≤–∞—à–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–∞—Ö –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö, "
        "–∞ –∑–∞—Ç–µ–º –¥–∞–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–æ–¥—Ö–æ–¥—è—â–∏–º –ø—Ä–æ—Ñ–µ—Å—Å–∏—è–º.\n\n"
        "–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å? –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å:",
        parse_mode=ParseMode.MARKDOWN
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    await send_test_question(callback.message, user_id)
    await callback.answer("–¢–µ—Å—Ç –∑–∞–ø—É—â–µ–Ω")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞ —Ç–µ—Å—Ç–∞
async def send_test_question(message, user_id):
    if user_id in test_state and test_state[user_id] < len(CAREER_TEST_QUESTIONS):
        question_num = test_state[user_id] + 1
        question = CAREER_TEST_QUESTIONS[test_state[user_id]]

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
        builder = InlineKeyboardBuilder()
        builder.add(types.InlineKeyboardButton(
            text="‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ—Å—Ç",
            callback_data="back_to_main"
        ))

        await message.answer(
            f"*–í–æ–ø—Ä–æ—Å {question_num}/{len(CAREER_TEST_QUESTIONS)}*\n\n{question}",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=builder.as_markup()
        )
    else:
        # –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await generate_test_result(message, user_id)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Ç–µ—Å—Ç–∞
@dp.message()
async def process_message(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    user_id = message.from_user.id
    user_message = message.text

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Ö–æ–¥–∏—Ç —Ç–µ—Å—Ç –∏ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤–æ–ø—Ä–æ—Å
    if user_id in test_state and 0 <= test_state[user_id] < len(CAREER_TEST_QUESTIONS):
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
        test_answers[user_id].append(user_message)

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
        test_state[user_id] += 1

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await send_test_question(message, user_id)
        return

    # –ï—Å–ª–∏ —Ä–µ–∂–∏–º –ø—Å–∏—Ö–æ–ª–æ–≥–∞ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    if user_id not in psychologist_active or not psychologist_active[user_id]:
        await message.answer(
            "–î–ª—è –æ–±—â–µ–Ω–∏—è —Å –ø—Å–∏—Ö–æ–ª–æ–≥–æ–º —Å–Ω–∞—á–∞–ª–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç —Ä–µ–∂–∏–º",
            reply_markup=get_main_keyboard(False)
        )
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ä–µ–∂–∏–º–∞ –ø—Å–∏—Ö–æ–ª–æ–≥–∞ (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥)
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é, –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if user_id not in user_sessions:
        user_sessions[user_id] = []

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not user_sessions[user_id]:
        user_sessions[user_id].append({
            "role": "system",
            "text": "–¢—ã –ø—Å–∏—Ö–æ–ª–æ–≥ –¥–ª—è —à–∫–æ–ª—å–Ω–∏–∫–æ–≤ –∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –¥–∏–∞–ª–æ–≥, –ø—Ä–æ—è–≤–ª—è—Ç—å —ç–º–ø–∞—Ç–∏—é –∏ –ø–æ–º–æ–≥–∞—Ç—å —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ —Å —É—á–µ–±–æ–π: —Å—Ç—Ä–µ—Å—Å–æ–º –æ—Ç —ç–∫–∑–∞–º–µ–Ω–æ–≤, –≤—ã–±–æ—Ä–æ–º —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞, —Å–ª–æ–∂–Ω–æ—Å—Ç—è–º–∏ –≤ —É—á–µ–±–µ, –ø—Ä–æ–±–ª–µ–º–∞–º–∏ —Å –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–µ–π, —Ç—Ä–µ–≤–æ–≥–æ–π –ø–µ—Ä–µ–¥ –û–ì–≠/–ï–ì–≠. –û–±—ä—è—Å–Ω—è–π —Å–≤–æ–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ–Ω—è—Ç–Ω–æ, –¥–∞–≤–∞–π –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–µ —Å–æ–≤–µ—Ç—ã. –ë—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–º."
        })

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_sessions[user_id].append({"role": "user", "text": user_message})

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤)
    if len(user_sessions[user_id]) > 10:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 9 —Å–æ–æ–±—â–µ–Ω–∏–π
        user_sessions[user_id] = [user_sessions[user_id][0]] + user_sessions[user_id][-9:]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º "–ø–µ—á–∞—Ç–∞–µ—Ç..." —Å—Ç–∞—Ç—É—Å
    await bot.send_chat_action(chat_id=user_id, action="typing")

    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –Ø–Ω–¥–µ–∫—Å –ì–ü–¢
    response = get_yandex_gpt_response(user_sessions[user_id])

    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
    user_sessions[user_id].append({"role": "assistant", "text": response})

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer(response)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞
async def generate_test_result(message, user_id):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º "–ø–µ—á–∞—Ç–∞–µ—Ç..." —Å—Ç–∞—Ç—É—Å
    await bot.send_chat_action(chat_id=user_id, action="typing")

    # –§–æ—Ä–º–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –Ω–µ–π—Ä–æ—Å–µ—Ç—å
    qa_pairs = []
    for i, question in enumerate(CAREER_TEST_QUESTIONS):
        if i < len(test_answers[user_id]):
            qa_pairs.append(f"–í–æ–ø—Ä–æ—Å: {question}")
            qa_pairs.append(f"–û—Ç–≤–µ—Ç: {test_answers[user_id][i]}")

    qa_text = "\n".join(qa_pairs)

    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞
    test_request = [
        {
            "role": "system",
            "text": "–¢—ã –ø—Ä–æ—Ñ–æ—Ä–∏–µ–Ω—Ç–æ–ª–æ–≥, —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–º—É –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—é. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç—ã —á–µ–ª–æ–≤–µ–∫–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∏ –¥–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–æ–¥—Ö–æ–¥—è—â–∏–º –ø—Ä–æ—Ñ–µ—Å—Å–∏—è–º."
        },
        {
            "role": "user",
            "text": f"–ù–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ—Ñ–æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞, –æ–ø—Ä–µ–¥–µ–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –¥–ª—è —á–µ–ª–æ–≤–µ–∫–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –∏ –æ–±—ä—è—Å–Ω–∏ –ø–æ—á–µ–º—É. –í–æ—Ç –æ—Ç–≤–µ—Ç—ã:\n\n{qa_text}\n\n–°—Ñ–æ—Ä–º–∏—Ä—É–π –ø–æ–¥—Ä–æ–±–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞, –≤–∫–ª—é—á–∞—é—â–∏–π: 1) –ê–Ω–∞–ª–∏–∑ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –∏ —Å–∫–ª–æ–Ω–Ω–æ—Å—Ç–µ–π, 2) –¢–æ–ø-5 —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–π —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º, –ø–æ—á–µ–º—É –æ–Ω–∏ –ø–æ–¥—Ö–æ–¥—è—Ç, 3) –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–∞–∑–≤–∏—Ç–∏—é –Ω–∞–≤—ã–∫–æ–≤ –¥–ª—è —ç—Ç–∏—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–π. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∂–∏ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏."
        }
    ]

    try:
        formatted_messages = []
        for msg in test_request:
            formatted_messages.append({
                'role': msg["role"],
                'text': msg["text"]
            })

        operation = model.run_deferred(formatted_messages)
        result = operation.wait().text

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞
        builder = InlineKeyboardBuilder()
        builder.add(types.InlineKeyboardButton(
            text="üîÑ –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ",
            callback_data="career_test"
        ))
        builder.add(types.InlineKeyboardButton(
            text="üéì –ò–∑—É—á–∏—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏",
            callback_data="career_guidance"
        ))
        builder.add(types.InlineKeyboardButton(
            text="‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            callback_data="back_to_main"
        ))
        builder.adjust(1)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await message.answer(
            "‚ú® *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ—Ñ–æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞* ‚ú®\n\n" + result,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=builder.as_markup()
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞: {e}")
        await message.answer(
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_main_keyboard(False)
        )

    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–∞
    if user_id in test_state:
        del test_state[user_id]
    if user_id in test_answers:
        del test_answers[user_id]

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Ñ–æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏
professions = {}  # –í—ã–±—Ä–∞–Ω–Ω–∞—è –ø—Ä–æ—Ñ–µ—Å—Å–∏—è
lectures = {}     # –í—ã–±—Ä–∞–Ω–Ω–∞—è –ª–µ–∫—Ü–∏—è
current_lecture = {}  # –¢–µ–∫—É—â–∞—è –ª–µ–∫—Ü–∏—è

# –ü—Ä–æ—Ñ–µ—Å—Å–∏–∏ –∏ –ª–µ–∫—Ü–∏–∏
PROFESSIONS_LECTURES = {
    "programmer": {
        "name": "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç",
        "lectures": {
            "basics": "–û—Å–Ω–æ–≤—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è",
            "web": "–í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞",
            "mobile": "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π",
            "ai": "–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç"
        }
    },
    "doctor": {
        "name": "–í—Ä–∞—á",
        "lectures": {
            "anatomy": "–ê–Ω–∞—Ç–æ–º–∏—è –∏ —Ñ–∏–∑–∏–æ–ª–æ–≥–∏—è",
            "diagnosis": "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π",
            "treatment": "–ú–µ—Ç–æ–¥—ã –ª–µ—á–µ–Ω–∏—è",
            "emergency": "–ù–µ–æ—Ç–ª–æ–∂–Ω–∞—è –ø–æ–º–æ—â—å"
        }
    },
    "designer": {
        "name": "–î–∏–∑–∞–π–Ω–µ—Ä",
        "lectures": {
            "graphics": "–ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –¥–∏–∑–∞–π–Ω",
            "ui": "UI/UX –¥–∏–∑–∞–π–Ω",
            "3d": "3D –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ",
            "animation": "–ê–Ω–∏–º–∞—Ü–∏—è"
        }
    }
}


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–µ–∂–∏–º–∞ –ø—Ä–æ—Ñ–æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏
@dp.callback_query(lambda c: c.data == "career_guidance")
async def career_guidance_mode(callback: types.CallbackQuery):
    """–ó–∞–ø—É—Å–∫ —Ä–µ–∂–∏–º–∞ –ø—Ä–æ—Ñ–æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏"""
    user_id = callback.from_user.id

    await callback.message.answer(
        "üéì *–†–µ–∂–∏–º –ø—Ä–æ—Ñ–æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏—é, –æ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ:",
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=get_professions_keyboard()
    )
    await callback.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏—é")


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
def get_professions_keyboard():
    builder = InlineKeyboardBuilder()

    for prof_key, prof_data in PROFESSIONS_LECTURES.items():
        builder.add(types.InlineKeyboardButton(
            text=prof_data["name"],
            callback_data=f"profession_{prof_key}"
        ))

    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    builder.add(types.InlineKeyboardButton(
        text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é",
        callback_data="back_to_main"
    ))

    builder.adjust(1)  # –ü–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Ä—è–¥—É
    return builder.as_markup()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
@dp.callback_query(lambda c: c.data and c.data.startswith("profession_"))
async def select_profession(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    profession_key = callback.data.split("_")[1]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    professions[user_id] = profession_key

    await callback.message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏—é: *{PROFESSIONS_LECTURES[profession_key]['name']}*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –ª–µ–∫—Ü–∏—é:",
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=get_lectures_keyboard(profession_key)
    )
    await callback.answer(f"–í—ã–±—Ä–∞–Ω–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è: {PROFESSIONS_LECTURES[profession_key]['name']}")


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ª–µ–∫—Ü–∏–∏
def get_lectures_keyboard(profession_key):
    builder = InlineKeyboardBuilder()

    for lecture_key, lecture_name in PROFESSIONS_LECTURES[profession_key]["lectures"].items():
        builder.add(types.InlineKeyboardButton(
            text=lecture_name,
            callback_data=f"lecture_{lecture_key}"
        ))

    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
    builder.add(types.InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –ø—Ä–æ—Ñ–µ—Å—Å–∏–π",
        callback_data="career_guidance"
    ))

    builder.adjust(1)
    return builder.as_markup()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ª–µ–∫—Ü–∏–∏
@dp.callback_query(lambda c: c.data and c.data.startswith("lecture_"))
async def select_lecture(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    lecture_key = callback.data.split("_")[1]

    if user_id not in professions:
        await callback.message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏—é.",
            reply_markup=get_professions_keyboard()
        )
        await callback.answer("–ù—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏—é")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –ª–µ–∫—Ü–∏–∏
    lectures[user_id] = lecture_key
    profession_key = professions[user_id]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å "–ø–µ—á–∞—Ç–∞–µ—Ç..."
    await bot.send_chat_action(chat_id=user_id, action="typing")

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ª–µ–∫—Ü–∏—é —Å –ø–æ–º–æ—â—å—é –ò–ò
    prompt = [
        {
            "role": "system",
            "text": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø—Ä–æ—Ñ–æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏. –°–æ–∑–¥–∞–≤–∞–π –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–µ –ª–µ–∫—Ü–∏–∏ –æ —Ä–∞–∑–Ω—ã—Ö –∞—Å–ø–µ–∫—Ç–∞—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–π –¥–ª—è —à–∫–æ–ª—å–Ω–∏–∫–æ–≤ –∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤."
        },
        {
            "role": "user",
            "text": f"–°–æ–∑–¥–∞–π –ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å–Ω—É—é –ª–µ–∫—Ü–∏—é –æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ '{PROFESSIONS_LECTURES[profession_key]['name']}', –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ '{PROFESSIONS_LECTURES[profession_key]['lectures'][lecture_key]}'. –õ–µ–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–∫–ª—é—á–∞—Ç—å: –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–Ω—è—Ç–∏—è, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –Ω–∞–≤—ã–∫–∏, –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, –ø—Ä–∏–º–µ—Ä—ã –∑–∞–¥–∞—á –∏–∑ —Ä–µ–∞–ª—å–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏ –∏ —Å–æ–≤–µ—Ç—ã –Ω–∞—á–∏–Ω–∞—é—â–∏–º. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è."
        }
    ]

    try:
        formatted_messages = []
        for msg in prompt:
            formatted_messages.append({
                'role': msg["role"],
                'text': msg["text"]
            })

        operation = model.run_deferred(formatted_messages)
        lecture_text = operation.wait().text

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–µ–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        current_lecture[user_id] = lecture_text

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –ª–µ–∫—Ü–∏–µ–π
        builder = InlineKeyboardBuilder()
        builder.add(types.InlineKeyboardButton(
            text="üîÑ –î—Ä—É–≥–∞—è –ª–µ–∫—Ü–∏—è",
            callback_data=f"profession_{profession_key}"
        ))
        builder.add(types.InlineKeyboardButton(
            text="üéì –î—Ä—É–≥–∞—è –ø—Ä–æ—Ñ–µ—Å—Å–∏—è",
            callback_data="career_guidance"
        ))
        builder.add(types.InlineKeyboardButton(
            text="‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            callback_data="back_to_main"
        ))
        builder.adjust(1)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–µ–∫—Ü–∏—é
        await callback.message.answer(
            lecture_text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=builder.as_markup()
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ª–µ–∫—Ü–∏–∏: {e}")
        await callback.message.answer(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ª–µ–∫—Ü–∏—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_lectures_keyboard(profession_key)
        )

    await callback.answer("–õ–µ–∫—Ü–∏—è –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–∞")



# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å —Ä–µ—Ü–µ–ø—Ç–æ–º –±–ª–∏–Ω–æ–≤
@dp.callback_query(lambda c: c.data == "pancake_recipe")
async def get_pancake_recipe(callback: types.CallbackQuery):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ—Ü–µ–ø—Ç –±–ª–∏–Ω–æ–≤, —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é"""
    user_id = callback.from_user.id
    is_active = psychologist_active.get(user_id, False)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º "–ø–µ—á–∞—Ç–∞–µ—Ç..." —Å—Ç–∞—Ç—É—Å
    await bot.send_chat_action(chat_id=user_id, action="typing")

    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞ –±–ª–∏–Ω–æ–≤
    recipe_request = [
        {
            "role": "system",
            "text": "–¢—ã –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–π —ç–∫—Å–ø–µ—Ä—Ç. –°–æ–∑–¥–∞–≤–∞–π –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã –±–ª–∏–Ω–æ–≤ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º–∏ –ø–æ—à–∞–≥–æ–≤—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏."
        },
        {
            "role": "user",
            "text": "–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç –±–ª–∏–Ω–æ–≤. –í–∫–ª—é—á–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã, –ø–æ—à–∞–≥–æ–≤—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –∏ —Å–æ–≤–µ—Ç—ã. –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫—Ä–∞—Å–∏–≤—ã–º –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å —ç–º–æ–¥–∑–∏."
        }
    ]

    try:
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ –º–æ–¥–µ–ª–∏
        formatted_messages = []
        for msg in recipe_request:
            formatted_messages.append({
                'role': msg["role"],
                'text': msg["text"]
            })

        operation = model.run_deferred(formatted_messages)
        recipe = operation.wait().text

        await callback.message.answer(
            recipe,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=get_main_keyboard(is_active)
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞: {e}")
        await callback.message.answer(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç –±–ª–∏–Ω–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_keyboard(is_active)
        )

    await callback.answer("–†–µ—Ü–µ–ø—Ç –±–ª–∏–Ω–æ–≤ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!")

@dp.callback_query(lambda c: c.data == "start_psychologist")
async def start_psychologist(callback: types.CallbackQuery):
    """–ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ä–µ–∂–∏–º–∞ –ø—Å–∏—Ö–æ–ª–æ–≥–∞"""
    user_id = callback.from_user.id
    psychologist_active[user_id] = True

    if user_id not in user_sessions:
        user_sessions[user_id] = []

    await callback.message.answer(
        "–†–µ–∂–∏–º –ø—Å–∏—Ö–æ–ª–æ–≥–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! üß†\n"
        "–Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏ –≤ —É—á–µ–±–µ, –ø–æ–¥–≥–æ—Ç–æ–≤–∫–æ–π –∫ —ç–∫–∑–∞–º–µ–Ω–∞–º, –≤—ã–±–æ—Ä–æ–º –≤—É–∑–∞ –∏ –¥—Ä—É–≥–∏–º–∏ —à–∫–æ–ª—å–Ω—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏.\n"
        "–†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ —Ç–µ–±—è –±–µ—Å–ø–æ–∫–æ–∏—Ç?",
        reply_markup=get_main_keyboard(True)
    )
    await callback.answer("–†–µ–∂–∏–º –ø—Å–∏—Ö–æ–ª–æ–≥–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")


@dp.callback_query(lambda c: c.data == "stop_psychologist")
async def stop_psychologist(callback: types.CallbackQuery):
    """–î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è —Ä–µ–∂–∏–º–∞ –ø—Å–∏—Ö–æ–ª–æ–≥–∞"""
    user_id = callback.from_user.id
    psychologist_active[user_id] = False

    await callback.message.answer(
        "–†–µ–∂–∏–º –ø—Å–∏—Ö–æ–ª–æ–≥–∞ –æ—Ç–∫–ª—é—á–µ–Ω. –í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=get_main_keyboard(False)
    )
    await callback.answer("–†–µ–∂–∏–º –ø—Å–∏—Ö–æ–ª–æ–≥–∞ –æ—Ç–∫–ª—é—á–µ–Ω")


@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    user_id = message.from_user.id
    is_active = psychologist_active.get(user_id, False)

    await message.answer(
        "–Ø —Ç–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç!\n"
        "–û–¥–Ω–∞ –∏–∑ –º–æ–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π - —Ä–µ–∂–∏–º –ø—Å–∏—Ö–æ–ª–æ–≥–∞.\n"
        "–í —ç—Ç–æ–º —Ä–µ–∂–∏–º–µ —è –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ:\n"
        "‚Ä¢ –°–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å–æ —Å—Ç—Ä–µ—Å—Å–æ–º –æ—Ç —É—á–µ–±—ã\n"
        "‚Ä¢ –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —ç–∫–∑–∞–º–µ–Ω–∞–º (–û–ì–≠/–ï–ì–≠)\n"
        "‚Ä¢ –° –≤—ã–±–æ—Ä–æ–º –≤—É–∑–∞ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏\n"
        "‚Ä¢ –° –ø—Ä–æ–±–ª–µ–º–∞–º–∏ –≤ —à–∫–æ–ª–µ\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π /reset —á—Ç–æ–±—ã —Å–±—Ä–æ—Å–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞.",
        reply_markup=get_main_keyboard(is_active)
    )


@dp.message(Command("reset"))
async def cmd_reset(message: types.Message):
    """–°–±—Ä–æ—Å–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞."""
    user_id = message.from_user.id
    user_sessions[user_id] = []
    is_active = psychologist_active.get(user_id, False)

    await message.answer(
        "–ò—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —Å–±—Ä–æ—à–µ–Ω–∞.",
        reply_markup=get_main_keyboard(is_active)
    )


def get_yandex_gpt_response(messages):
    """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –Ø–Ω–¥–µ–∫—Å –ì–ü–¢ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º SDK."""
    try:
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è SDK
        formatted_messages = []
        for msg in messages:
            formatted_messages.append({
                'role': msg["role"],
                'text': msg["text"]
            })

        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ –º–æ–¥–µ–ª–∏
        operation = model.run_deferred(formatted_messages)
        result = operation.wait()
        return result.text

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –Ø–Ω–¥–µ–∫—Å –ì–ü–¢: {e}")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –º–µ–Ω—è –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ."


@dp.message()
async def process_message(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    user_id = message.from_user.id
    user_message = message.text

    # –ï—Å–ª–∏ —Ä–µ–∂–∏–º –ø—Å–∏—Ö–æ–ª–æ–≥–∞ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    if user_id not in psychologist_active or not psychologist_active[user_id]:
        await message.answer(
            "–î–ª—è –æ–±—â–µ–Ω–∏—è —Å –ø—Å–∏—Ö–æ–ª–æ–≥–æ–º —Å–Ω–∞—á–∞–ª–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç —Ä–µ–∂–∏–º",
            reply_markup=get_main_keyboard(False)
        )
        return

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é, –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if user_id not in user_sessions:
        user_sessions[user_id] = []

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not user_sessions[user_id]:
        user_sessions[user_id].append({
            "role": "system",
            "text": "–¢—ã –ø—Å–∏—Ö–æ–ª–æ–≥ –¥–ª—è —à–∫–æ–ª—å–Ω–∏–∫–æ–≤ –∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –¥–∏–∞–ª–æ–≥, –ø—Ä–æ—è–≤–ª—è—Ç—å —ç–º–ø–∞—Ç–∏—é –∏ –ø–æ–º–æ–≥–∞—Ç—å —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ —Å —É—á–µ–±–æ–π: —Å—Ç—Ä–µ—Å—Å–æ–º –æ—Ç —ç–∫–∑–∞–º–µ–Ω–æ–≤, –≤—ã–±–æ—Ä–æ–º —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞, —Å–ª–æ–∂–Ω–æ—Å—Ç—è–º–∏ –≤ —É—á–µ–±–µ, –ø—Ä–æ–±–ª–µ–º–∞–º–∏ —Å –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–µ–π, —Ç—Ä–µ–≤–æ–≥–æ–π –ø–µ—Ä–µ–¥ –û–ì–≠/–ï–ì–≠. –û–±—ä—è—Å–Ω—è–π —Å–≤–æ–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ–Ω—è—Ç–Ω–æ, –¥–∞–≤–∞–π –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–µ —Å–æ–≤–µ—Ç—ã. –ë—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–º."
        })

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_sessions[user_id].append({"role": "user", "text": user_message})

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤)
    if len(user_sessions[user_id]) > 10:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 9 —Å–æ–æ–±—â–µ–Ω–∏–π
        user_sessions[user_id] = [user_sessions[user_id][0]] + user_sessions[user_id][-9:]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º "–ø–µ—á–∞—Ç–∞–µ—Ç..." —Å—Ç–∞—Ç—É—Å
    await bot.send_chat_action(chat_id=user_id, action="typing")

    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –Ø–Ω–¥–µ–∫—Å –ì–ü–¢
    response = get_yandex_gpt_response(user_sessions[user_id])

    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
    user_sessions[user_id].append({"role": "assistant", "text": response})

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer(response)


async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥–ª–∏ –Ω–∞–∫–æ–ø–∏—Ç—å—Å—è
    await bot.delete_webhook(drop_pending_updates=True)
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ long polling
    await dp.start_polling(bot)


if __name__ == "__main__":
    import asyncio
    asyncio.run(main())